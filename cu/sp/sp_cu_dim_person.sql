CREATE OR REPLACE PROCEDURE `daas-cdw-dev.mdm.sp_cu_dim_person`(institution_name STRING, target_table STRING, OUT result STRING)
BEGIN
	declare institution string default 'CU';
	declare institution_id int64 default 2;
	declare dml_mode string default 'scd2';
	declare target_dataset string default 'mdm';
	declare target_tablename string default 't_dim_person';
	declare trans_tablename string default 'trans_cu_dim_person';
	declare load_source string default 'mdm.sp_cu_dim_person';
	declare sk_column_name string default 'person_key';
	declare additional_attributes ARRAY<struct<keyword string, value string>>;


	/* common across */
	declare trans_datasetname string default null;
	declare audit_load_key string default generate_uuid();
	declare job_start_dt timestamp default current_timestamp();
	declare job_end_dt timestamp default current_timestamp();
	declare job_completed_ind string default null;
	declare job_type string default 'ODS';
	declare load_method string default 'scheduled query';
	declare out_sql string;
	/* end common across */

	SET additional_attributes= [
						("sk_column_name", "person_key"),
						("min_rec_eff_date_col", "MIN_SPRIDEN_CREATE_DATE")];
/* Begin of source logic */
BEGIN  -- Need this extra begin for exception section read the above variables

CREATE TEMP TABLE trans_cu_dim_person CLUSTER BY etl_pk_hash, etl_chg_hash
AS (
WITH SRC AS (
	SELECT	DISTINCT
		'CU' AS INSTITUTION,
		SPRIDEN_PIDM AS PERSON_UID,
		CAST(SPRIDEN_ID AS STRING) AS DSI,
		DATE(SPBPERS_BIRTH_DATE,"America/Chicago") AS BIRTH_DATE,
		CAST(SPBPERS_CITZ_CODE AS STRING) AS CITIZENSHIP_TYPE,
		CAST(STVCITZ_DESC AS STRING)AS CITIZENSHIP_TYPE_DESC,
		SPBPERS_CONFID_IND  AS CONFIDENTIALITY_IND,
		COALESCE(SPBPERS_DEAD_IND,'N') AS DECEASED_STATUS,
			CAST
			(CASE
				WHEN DO_NOT_CONTACT_C THEN 'Y'
				ELSE 'N'
			END AS STRING) AS DO_NOT_CALL_IND,
			CAST
			(CASE
				WHEN EMAIL_OPT_OUT_C THEN 'Y'
				ELSE 'N'
			END AS STRING) AS DO_NOT_EMAIL_IND,
			CAST(SPRIDEN_ORIGIN AS STRING) AS ENTITY_ORIGIN,
			CAST(GOREMAL_EMAL_CODE AS STRING) AS EMAIL_PREFERRED,
			CAST(GOREMAL_EMAIL_ADDRESS AS STRING) AS EMAIL_PREFERRED_ADDRESS,
			CAST(STVETHN.STVETHN_EDI_EQUIV AS STRING) AS ETHNICITY_EDI_EQUIV,
			CAST(SPRIDEN_FIRST_NAME AS STRING) AS FIRST_NAME,
			CAST(TRIM(SPRIDEN_LAST_NAME || ', ' || SPRIDEN_FIRST_NAME || ' ' || COALESCE(SPRIDEN_MI, ' ')) AS STRING) AS FULL_NAME_LFMI,
			CAST(SPBPERS_SEX AS STRING) AS GENDER,
		CAST
		(CASE WHEN SPBPERS_SEX = 'M' THEN 'Male'
			WHEN SPBPERS_SEX = 'M' THEN 'Male'
			WHEN SPBPERS_SEX = 'F' THEN 'Female'
			WHEN SPBPERS_SEX = 'N' THEN 'Not Reported'
			ELSE ''
		END AS STRING) AS GENDER_DESC,
			CAST(SPRIDEN_LAST_NAME AS STRING) AS LAST_NAME,
			CAST(SPBPERS_LEGAL_NAME AS STRING) AS LEGAL_NAME,
			CAST(SPBPERS_LGCY_CODE AS STRING) AS LEGACY,
			CAST(STVLGCY_DESC AS STRING) AS LEGACY_DESC,
			CAST(SUBSTR(SPRIDEN_MI,	1,1) AS STRING) AS MIDDLE_INITIAL,
			CAST(SPRIDEN_MI AS STRING) AS MIDDLE_NAME,
			CAST(SPBPERS_MRTL_CODE AS STRING) AS MARITAL_STATUS,
			CAST(STVMRTL_DESC AS STRING) AS MARITAL_STATUS_DESC,
			CAST(SPBPERS_NAME_PREFIX AS STRING) AS NAME_PREFIX,
			CAST(SPBPERS_NAME_SUFFIX AS STRING) AS NAME_SUFFIX,
			CAST(SPRIDEN_NTYP_CODE AS STRING) AS NAME_TYPE,
			CAST(GOBINTL_NATN_CODE_BIRTH AS STRING) AS NATION_OF_BIRTH,
			CAST(STVNATN_NB.STVNATN_NATION AS STRING) AS NATION_OF_BIRTH_DESC,
			CAST(GOBINTL_NATN_CODE_LEGAL AS STRING) AS NATION_OF_CITIZENSHIP,
			CAST(STVNATN_NC.STVNATN_NATION AS STRING) AS NATION_OF_CITIZENSHIP_DESC,
			CAST(SECOND_CITZ_COUNTRY.GORSDAV_VALUE AS STRING) AS NATION_OF_CITIZENSHIP2,
			CAST(SECOND_CITZ.STVNATN_NATION AS STRING) AS NATION_OF_CITIZENSHIP_DESC2,
		GOBINTL_PASSPORT_EXP_DATE AS PASSPORT_EXPIRE_DATE,
		SAFE.PARSE_DATE('%d-%h-%Y', SECOND_PASSPORT_EXP_DATE.GORSDAV_VALUE)AS PASSPORT_EXPIRE_DATE2,
		SAFE.PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S',PASSPORT_ISSUE_DATE) AS PASSPORT_ISSUE_DATE,
		SAFE.PARSE_TIMESTAMP('%Y-%m-%d %H:%M:%S',SECOND_PASSPORT_ISSUE_DATE.GORSDAV_VALUE)  AS PASSPORT_ISSUE_DATE2,
		CAST(PASSPORT_ISSUE_LOCATION AS STRING) AS PASSPORT_ISSUE_LOCATION,
			CAST(GOBINTL_PASSPORT_ID AS STRING) AS PASSPORT_ID,
			CAST(SECOND_PASSPORT_NUMBER.GORSDAV_VALUE AS STRING) AS PASSPORT_ID2,
			CAST(GOBINTL_NATN_CODE_ISSUE AS STRING) AS PASSPORT_ISSUE_NATION,
			CAST(STVNATN_NP.STVNATN_NATION AS STRING) AS PASSPORT_ISSUE_NATION_DESC,
			CAST(SECOND_PASSPORT_COUNTRY.GORSDAV_VALUE AS STRING) AS PASSPORT_ISSUE_NATION2,
			CAST(SECOND_PASSPORT.STVNATN_NATION AS STRING) AS PASSPORT_ISSUE_NATION_DESC2,
			CAST(SPBPERS_PREF_FIRST_NAME AS STRING) AS PREFERRED_FIRST_NAME,
			CAST(SPRMEDI_DISA_CODE AS STRING) AS PRIMARY_DISABILITY,
			CAST(SPRMEDI_DISB_IND AS STRING) AS PRIMARY_DISABILITY_IND,
			CAST(SPRMEDI_SPSR_CODE AS STRING) AS PRIM_DISABILITY_SERVICE,
			CAST(SPBPERS_ETHN_CODE AS STRING) AS PRIMARY_ETHNICITY,
			CAST(STVETHN_DESC AS STRING) AS PRIMARY_ETHNICITY_DESC,
			CAST(STVETHN_ETCT_CODE AS STRING) AS PRIM_ETHNICITY_CATEGORY,
			CAST(STVETCT_DESC AS STRING) AS PRIM_ETHNICITY_CATEGORY_DESC,
			CAST(RACE_DETAILS.RACE AS STRING) AS RACE,
			RACE_DETAILS.RACE_COUNT  AS RACE_COUNT,
			RACE_DETAILS.RACE_CATEGORY_COUNT RACE_CATEGORY_COUNT,
			CAST(RACE_DETAILS.RACE_DESC AS STRING) AS RACE_DESC,
			CAST(SPBPERS_CONFIRMED_RE_DATE AS DATE ) AS RACE_ETHNICITY_CONFIRM_DATE,
			CAST(SPBPERS_CONFIRMED_RE_CDE AS STRING) AS RACE_ETHNICITY_CONFIRM_IND,
			CAST(SPBPERS_SSN AS STRING) AS TAX_ID,
			CAST(SPBPERS_VERA_IND AS STRING) AS VETERAN_CATEGORY,
			CAST(SUBSTR
			(CASE WHEN SPBPERS_VERA_IND IS NULL THEN NULL
				WHEN SPBPERS_VERA_IND = 'O' THEN 'Other Protected Veteran Only'
				WHEN SPBPERS_VERA_IND = 'V' THEN 'Vietnam Veteran Only'
				WHEN SPBPERS_VERA_IND = 'B' THEN 'Both - Vietnam and Other Eligible Veteran'
			END,	1,	60) AS STRING) AS VETERAN_CATEGORY_DESC,
			CAST(SPBPERS_SDVET_IND AS STRING) AS VETERAN_SPECIAL_DISABLED_IND,
			CAST(GORVISA_VTYP_CODE AS STRING) AS VISA_TYPE,
			CAST(STVVTYP_DESC AS STRING) AS VISA_TYPE_DESC,
			CAST(GORVISA_VISA_NUMBER AS STRING) AS VISA_NUMBER,
			CAST(GORVISA_VISA_EXPIRE_DATE AS DATE) AS VISA_EXPIRE_DATE,
			CAST(US_VISA_EXP_DATE AS DATE) AS US_VISA_EXP_DATE,
			CAST(IS_AMR_IND_OR_ALASKAN_IPEDS AS STRING) AS IS_AMR_IND_OR_ALASKAN_IPEDS,
			CAST(IS_ASIAN_IPEDS AS STRING) AS IS_ASIAN_IPEDS,
			CAST(IS_BLACK_OR_AFR_AMR_IPEDS AS STRING) AS IS_BLACK_OR_AFR_AMR_IPEDS,
			CAST(IS_HAWAII_OR_PAC_ISLNDER_IPEDS AS STRING) AS IS_HAWAII_OR_PAC_ISLNDER_IPEDS,
			CASE
				WHEN IS_HISPANIC_IPEDS IS NOT NULL
				OR SPBPERS_ETHN_CDE = '2' THEN 'Y'
				ELSE 'N'
			END AS IS_HISPANIC_LATINO_IPEDS,
			CAST(IS_WHITE_IPEDS AS STRING) AS IS_WHITE_IPEDS,
			CAST(SKIPPED_IPEDS AS STRING) AS SKIPPED_IPEDS,
			CAST(DECLINED_IPEDS AS STRING) AS DECLINED_IPEDS,
			CAST(UNKNOWN_IPEDS AS STRING) AS UNKNOWN_IPEDS,
			CASE
				WHEN
				(CASE
					WHEN IS_HISPANIC_IPEDS IS NOT NULL
					OR SPBPERS_ETHN_CDE = '2' THEN 'Y'
					ELSE 'N'
				END) = 'Y' THEN 'Hispanic (of any race)'
				WHEN RACE_CATEGORY_COUNT > 1 THEN 'Two or More Races'
				WHEN IS_AMR_IND_OR_ALASKAN_IPEDS = 'Y' THEN 'American Indian or Alaska Native'
				WHEN IS_ASIAN_IPEDS = 'Y' THEN 'Asian'
				WHEN IS_BLACK_OR_AFR_AMR_IPEDS = 'Y' THEN 'Black or African American'
				WHEN IS_HAWAII_OR_PAC_ISLNDER_IPEDS = 'Y' THEN 'Native Hawaiian or Other Pacific Islander'
				WHEN IS_WHITE_IPEDS = 'Y' THEN 'White'
				ELSE 'Race/Ethnicity Unknown'
			END AS RACE_ETHNICITY,
			R.GZRROLE_ROLE AS ROLE,
			MIN_SPRIDEN_CREATE_DATE as MIN_SPRIDEN_CREATE_DATE,
		'CU_BNR'  AS SOURCE_SYSTEM_NAME,
		 row_number() over (partition by spriden_pidm order by spriden_version desc) rnk
		FROM
			raw_cu_bnr.spriden
		LEFT JOIN (
			SELECT
				SPRIDEN_PIDM AS PIDM,
				COALESCE (MIN(SPRIDEN_CREATE_DATE),
				MIN(SPRIDEN_ACTIVITY_DATE)) AS MIN_SPRIDEN_CREATE_DATE
			FROM
				raw_cu_bnr.spriden
			GROUP BY
				SPRIDEN_PIDM) s ON
			(SPRIDEN_PIDM = s.PIDM)
		LEFT JOIN raw_cu_bnr.spbpers ON
			(SPBPERS_PIDM = SPRIDEN_PIDM )
		LEFT JOIN (
			SELECT
				*
			FROM
				(
				SELECT
					GOREMAL_PIDM,
					GOREMAL_EMAL_CODE,
					GOREMAL_EMAIL_ADDRESS,
					ROW_NUMBER() OVER(PARTITION BY GOREMAL_PIDM
				ORDER BY
					GOREMAL_ACTIVITY_DATE DESC ) RN
				FROM
					raw_cu_bnr.goremal
				WHERE
					GOREMAL_PREFERRED_IND = 'Y'
					AND GOREMAL_STATUS_IND = 'A')
			WHERE
				RN = 1) GOREMAL_PREF ON
			( GOREMAL_PIDM = SPRIDEN_PIDM )
		LEFT JOIN raw_cu_bnr.gobintl ON
			(GOBINTL_PIDM = SPRIDEN_PIDM )
		LEFT JOIN raw_cu_bnr.gorsdav SECOND_CITZ_COUNTRY ON
			( CAST(GOBINTL_PIDM AS STRING) = SECOND_CITZ_COUNTRY.GORSDAV_PK_PARENTTAB
			AND SECOND_CITZ_COUNTRY.GORSDAV_TABLE_NAME = 'GOBINTL'
			AND SECOND_CITZ_COUNTRY.GORSDAV_ATTR_NAME = 'SECOND_CITIZENSHIP_COUNTRY' )
		LEFT JOIN raw_cu_bnr.gorsdav SECOND_PASSPORT_COUNTRY ON
			( CAST(GOBINTL_PIDM AS STRING) = SECOND_PASSPORT_COUNTRY.GORSDAV_PK_PARENTTAB
			AND SECOND_PASSPORT_COUNTRY.GORSDAV_TABLE_NAME = 'GOBINTL'
			AND SECOND_PASSPORT_COUNTRY.GORSDAV_ATTR_NAME = 'SECOND_PASSPORT_COUNTRY' )
		LEFT JOIN raw_cu_bnr.gorsdav SECOND_PASSPORT_NUMBER ON
			( CAST(GOBINTL_PIDM AS STRING) = SECOND_PASSPORT_NUMBER.GORSDAV_PK_PARENTTAB
			AND SECOND_PASSPORT_NUMBER.GORSDAV_TABLE_NAME = 'GOBINTL'
			AND SECOND_PASSPORT_NUMBER.GORSDAV_ATTR_NAME = 'SECOND_PASSPORT_NUMBER' )
		LEFT JOIN raw_cu_bnr.gorsdav SECOND_PASSPORT_ISSUE_DATE ON
			( CAST(GOBINTL_PIDM AS STRING) = SECOND_PASSPORT_ISSUE_DATE.GORSDAV_PK_PARENTTAB
			AND SECOND_PASSPORT_ISSUE_DATE.GORSDAV_TABLE_NAME = 'GOBINTL'
			AND SECOND_PASSPORT_ISSUE_DATE.GORSDAV_ATTR_NAME = 'SECOND_PASSPORT_ISSUE_DATE' )
		LEFT JOIN raw_cu_bnr.gorsdav SECOND_PASSPORT_EXP_DATE ON
			( CAST(GOBINTL_PIDM AS STRING) = SECOND_PASSPORT_EXP_DATE.GORSDAV_PK_PARENTTAB
			AND SECOND_PASSPORT_EXP_DATE.GORSDAV_TABLE_NAME = 'GOBINTL'
			AND SECOND_PASSPORT_EXP_DATE.GORSDAV_ATTR_NAME = 'SECOND_PASSPORT_EXP_DATE' )
		LEFT JOIN (
			SELECT
				DISTINCT CAST(g.gorsdav_pk_parenttab AS STRING) gorsdav_pk_parenttab,
				max(CASE WHEN g.gorsdav_attr_name = 'PASSPORT_ISSUE_DATE' THEN g.GORSDAV_VALUE END) OVER (PARTITION BY CAST(g.gorsdav_pk_parenttab AS STRING)) AS passport_issue_date,
				max(CASE WHEN g.gorsdav_attr_name = 'PASSPORT_ISSUE_LOCATION' THEN g.GORSDAV_VALUE END) OVER (PARTITION BY CAST(g.gorsdav_pk_parenttab AS STRING)) AS passport_issue_location
			FROM
				raw_cu_bnr.gorsdav g
			WHERE
				g.gorsdav_table_name = 'GOBINTL'
				AND g.gorsdav_attr_name IN ('PASSPORT_ISSUE_DATE','PASSPORT_ISSUE_LOCATION') )PASSPORT
      ON
			(CAST(GOBINTL_PIDM AS STRING) = PASSPORT.gorsdav_pk_parenttab )
		LEFT JOIN raw_cu_bnr.stvnatn STVNATN_NB ON
			( STVNATN_NB.STVNATN_CODE = GOBINTL_NATN_CODE_BIRTH)
		LEFT JOIN raw_cu_bnr.stvnatn STVNATN_NC ON
			( STVNATN_NC.STVNATN_CODE = GOBINTL_NATN_CODE_LEGAL)
		LEFT JOIN raw_cu_bnr.stvnatn STVNATN_NP ON
			( STVNATN_NP.STVNATN_CODE = GOBINTL_NATN_CODE_ISSUE)
		LEFT JOIN raw_cu_bnr.stvnatn SECOND_CITZ ON
			(SECOND_CITZ_COUNTRY.GORSDAV_VALUE = SECOND_CITZ.STVNATN_CODE)
		LEFT JOIN raw_cu_bnr.stvnatn SECOND_PASSPORT ON
			(SECOND_PASSPORT_COUNTRY.GORSDAV_VALUE = SECOND_PASSPORT.STVNATN_CODE)
		LEFT JOIN raw_cu_bnr.stvmrtl STVMRTL ON
			( STVMRTL_CODE = SPBPERS_MRTL_CODE)
		LEFT JOIN raw_cu_bnr.stvethn STVETHN ON
			( STVETHN_CODE = SPBPERS_ETHN_CODE)
		LEFT JOIN (
			SELECT
				r.*,
				GORRACE_DESC AS RACE_DESC
			FROM
				(
				SELECT
					GORPRAC_PIDM,
					MAX(GORPRAC_RACE_CDE) AS RACE,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '1' THEN 'Y' END) AS IS_WHITE_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '2' THEN 'Y' END) AS IS_BLACK_OR_AFR_AMR_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '3' THEN 'Y' END) AS IS_HISPANIC_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '4' THEN 'Y' END) AS IS_ASIAN_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '5' THEN 'Y' END) AS IS_HAWAII_OR_PAC_ISLNDER_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '6' THEN 'Y' END) AS IS_AMR_IND_OR_ALASKAN_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = '7' OR GORPRAC_RACE_CDE IS NULL THEN 'Y' END) AS UNKNOWN_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = 'DE' THEN 'Y' END) AS DECLINED_IPEDS,
					MAX(CASE WHEN GORPRAC_RACE_CDE = 'SK' THEN 'Y' END) AS SKIPPED_IPEDS,
					COUNT(DISTINCT CASE WHEN GORPRAC_RACE_CDE IN ('7', 'DE', 'SK') THEN NULL ELSE GORPRAC_RACE_CDE END) AS RACE_COUNT,
					COUNT(DISTINCT CASE WHEN GORPRAC_RACE_CDE IN ('7', 'DE', 'SK') THEN NULL ELSE GORRACE_RRAC_CODE END) AS RACE_CATEGORY_COUNT
				FROM
					(
					SELECT
						GORPRAC_PIDM,
						GORPRAC_RACE_CDE
					FROM
						raw_cu_bnr.gorprac
				UNION ALL
					SELECT
						SPBPERS_PIDM,
						SPBPERS_ETHN_CODE
					FROM
						raw_cu_bnr.spbpers
					WHERE
						SPBPERS_ETHN_CODE IS NOT NULL ) a
				LEFT JOIN raw_cu_bnr.gorrace ON
					( GORRACE_RACE_CDE = GORPRAC_RACE_CDE)
				GROUP BY
					GORPRAC_PIDM ) r
			LEFT JOIN raw_cu_bnr.gorrace ON
				( GORRACE_RACE_CDE = r.RACE) )RACE_DETAILS ON
			( GORPRAC_PIDM = SPRIDEN_PIDM)
			--LEFT JOIN raw_cu_bnr.GORVISA
			--  ON ( GORVISA_PIDM = SPRIDEN_PIDM)
		LEFT JOIN (
			SELECT
				GORVISA_PIDM,
				GORVISA_VTYP_CODE,
				GORVISA_VISA_NUMBER,
				GORVISA_VISA_EXPIRE_DATE,
				US_VISA_EXP_DATE
			FROM
				(
				SELECT
					GORVISA_PIDM,
					GORVISA_VTYP_CODE,
					GORVISA_VISA_NUMBER,
					CASE
						WHEN GORVISA_NATN_CODE_ISSUE = '157' THEN GORVISA_VISA_EXPIRE_DATE
					END US_VISA_EXP_DATE,
					GORVISA_VISA_EXPIRE_DATE,
					ROW_NUMBER() OVER(PARTITION BY GORVISA_PIDM	ORDER BY GORVISA_SEQ_NO DESC NULLS LAST) AS RNK
				FROM
					raw_cu_bnr.gorvisa
				WHERE
					GORVISA_VTYP_CODE IN ('BS','KS','MS')) A
			WHERE
				RNK = 1 )GORVISA ON
			( GORVISA_PIDM = SPRIDEN_PIDM)
		LEFT JOIN raw_cu_bnr.stvlgcy STVLGCY ON
			( STVLGCY_CODE = SPBPERS_LGCY_CODE)
		LEFT JOIN raw_cu_bnr.stvvtyp STVVTYP ON
			( STVVTYP_CODE = GORVISA_VTYP_CODE)
		LEFT JOIN raw_cu_bnr.stvetct STVETCT ON
			( STVETCT_CODE = STVETHN_ETCT_CODE)
		LEFT JOIN raw_cu_bnr.stvcitz ON
			( STVCITZ_CODE = SPBPERS_CITZ_CODE )
		LEFT JOIN raw_cu_bnr.sprmedi ON
			( SPRMEDI_PIDM = SPRIDEN_PIDM)
		LEFT JOIN (
			SELECT   BANNER_ID_C AS DSI_C, MOBILE_PHONE_INTERNAL_DNC_C AS DO_NOT_CONTACT_C FROM  RAW_B2C_SFDC.BRAND_PROFILE_C
					WHERE BANNER_ID_C IS NOT NULL AND CAST(MOBILE_PHONE_INTERNAL_DNC_C AS INTEGER) = 1
							UNION DISTINCT
			SELECT   BANNER_ID_C, HOME_PHONE_INTERNAL_DNC_C FROM  RAW_B2C_SFDC.BRAND_PROFILE_C
					WHERE BANNER_ID_C IS NOT NULL AND CAST(HOME_PHONE_INTERNAL_DNC_C AS INTEGER) = 1
				) C ON
			(SPRIDEN_ID = C.DSI_C)
		LEFT JOIN (
			SELECT
				DSI_C,
				EMAIL_OPT_OUT_C
			FROM
				(
				SELECT
					C.DSI_C , EMAIL_OPT_OUT_C
					,ROW_NUMBER() OVER (PARTITION BY E.CONTACT_C ORDER BY E.SYSTEM_MODSTAMP DESC) AS RNUM
				FROM
					raw_cu_sfdc.email_c E
				JOIN raw_cu_sfdc.contact C ON
					(E.CONTACT_C = C.ID
					AND c.email = e.EMAIL_ADDRESS_C)
				WHERE
					C.DSI_C IS NOT NULL )
			WHERE
				RNUM = 1
				AND CAST(EMAIL_OPT_OUT_C as INTEGER) = 1 ) E ON
			(SPRIDEN_ID = E.DSI_C)
		LEFT JOIN (
			SELECT
				GZRROLE_PIDM,
				GZRROLE_ROLE,
				GZRROLE_ACTIVITY_DATE,
				DATE(GZRROLE_ROLE_DATE) AS ROLE_EFF_DATE ,
				COALESCE (DATE(LEAD(GZRROLE_ROLE_DATE) OVER (PARTITION BY CAST(GZRROLE_PIDM as INTEGER)
			ORDER BY
				GZRROLE_ROLE_DATE,
				GZRROLE_ACTIVITY_DATE)) -1 ,
				PARSE_DATE('%m-%d-%Y','12-31-9999')) AS ROLE_EXP_DATE
			FROM
				raw_cu_bnr.gzrrole) R ON
			CAST(SPRIDEN_PIDM AS INTEGER) = CAST(R.GZRROLE_PIDM AS INTEGER)
			AND CURRENT_DATE BETWEEN ROLE_EFF_DATE AND ROLE_EXP_DATE
		WHERE
			SPRIDEN_ENTITY_IND = 'P'
			AND SPRIDEN_CHANGE_IND IS NULL
	)
	SELECT
		FARM_FINGERPRINT(FORMAT('%T', ARRAY_TO_STRING([a.institution, cast(a.person_uid as string)], '-'))) AS etl_pk_hash,
		FARM_FINGERPRINT(FORMAT('%T', a )) AS etl_chg_hash,
		CURRENT_TIMESTAMP            AS etl_created_date,
		CURRENT_TIMESTAMP            AS etl_updated_date,
		audit_load_key  AS etl_ins_audit_key,
		audit_load_key  AS etl_upd_audit_key,
		load_source AS etl_resource_name,
		institution_id as institution_id,
		cast(current_date() as timestamp) as rec_eff_date,
		cast(cast('2500-01-01' as date) as timestamp) as rec_exp_date,
		true as is_current,
		a.* except (rnk),
		generate_uuid() as person_key
	FROM SRC a
	where rnk =1
);

 /* end of src logic */

	/* common code */
	call utility.sp_process_elt(institution, dml_mode, target_dataset, target_tablename, trans_datasetname, trans_tablename, additional_attributes, out_sql);

	call audit_cdw_log.sp_export_audit_cdw_log(audit_load_key,target_tablename, job_start_dt,current_timestamp(), 'Y', job_type, load_method, load_source);
	set result = 'SUCCESS';

EXCEPTION WHEN ERROR THEN

    call audit_cdw_log.sp_export_audit_cdw_log(audit_load_key,target_tablename, job_start_dt,current_timestamp(), 'N', job_type, load_method, load_source);

 -- insert into error_log table
    insert into  audit_cdw_log.error_log (error_load_key, process_name, table_name, error_details, etl_create_date, etl_resource_name, etl_ins_audit_key)
    values    (audit_load_key,'ODS_LOAD',target_tablename, @@error.message, current_timestamp() ,load_source, audit_load_key) ;

		set result = @@error.message;
		raise using message = @@error.message;

END;
END;